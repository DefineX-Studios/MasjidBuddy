revoke delete on table "public"."user" from "anon";

revoke insert on table "public"."user" from "anon";

revoke references on table "public"."user" from "anon";

revoke select on table "public"."user" from "anon";

revoke trigger on table "public"."user" from "anon";

revoke truncate on table "public"."user" from "anon";

revoke update on table "public"."user" from "anon";

revoke delete on table "public"."user" from "authenticated";

revoke insert on table "public"."user" from "authenticated";

revoke references on table "public"."user" from "authenticated";

revoke select on table "public"."user" from "authenticated";

revoke trigger on table "public"."user" from "authenticated";

revoke truncate on table "public"."user" from "authenticated";

revoke update on table "public"."user" from "authenticated";

revoke delete on table "public"."user" from "service_role";

revoke insert on table "public"."user" from "service_role";

revoke references on table "public"."user" from "service_role";

revoke select on table "public"."user" from "service_role";

revoke trigger on table "public"."user" from "service_role";

revoke truncate on table "public"."user" from "service_role";

revoke update on table "public"."user" from "service_role";

alter table "public"."user" drop constraint "user_uid_key";

alter table "public"."user" drop constraint "user_pkey";

drop index if exists "public"."user_pkey";

drop index if exists "public"."user_uid_key";

drop table "public"."user";

create table "public"."user_masjid_subscription" (
    "id" bigint generated by default as identity not null,
    "masjid_id" bigint not null,
    "user_id" uuid not null
);


alter table "public"."user_masjid_subscription" enable row level security;

CREATE UNIQUE INDEX user_masjid_subscription_pkey ON public.user_masjid_subscription USING btree (id);

alter table "public"."user_masjid_subscription" add constraint "user_masjid_subscription_pkey" PRIMARY KEY using index "user_masjid_subscription_pkey";

alter table "public"."user_masjid_subscription" add constraint "user_masjid_subscription_masjid_id_fkey" FOREIGN KEY (masjid_id) REFERENCES masjid(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_masjid_subscription" validate constraint "user_masjid_subscription_masjid_id_fkey";

alter table "public"."user_masjid_subscription" add constraint "user_masjid_subscription_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_masjid_subscription" validate constraint "user_masjid_subscription_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_subscribed_masjids()
 RETURNS TABLE(id bigint, name text, longitude numeric, latitude numeric, address json, mobile_no text, namaz_timings json)
 LANGUAGE sql
AS $function$SELECT
  m.id,
  m.name,
  m.longitude,
  m.latitude,
  m.address,
  m.mobile_no,
  json_object_agg(nt.namaz, nt.time) as namaz_timings
FROM
  public.masjid m
  JOIN public.namaz_timing nt ON m.id = nt.masjid_id
  JOIN public.user_masjid_subscription s ON m.id = s.masjid_id
WHERE
  s.user_id = auth.uid()
GROUP BY
  m.id
ORDER BY
  m.id;$function$
;

CREATE OR REPLACE FUNCTION public.hello_world()
 RETURNS text
 LANGUAGE sql
AS $function$  -- 4
  select current_user;  -- 5
$function$
;

grant delete on table "public"."user_masjid_subscription" to "anon";

grant insert on table "public"."user_masjid_subscription" to "anon";

grant references on table "public"."user_masjid_subscription" to "anon";

grant select on table "public"."user_masjid_subscription" to "anon";

grant trigger on table "public"."user_masjid_subscription" to "anon";

grant truncate on table "public"."user_masjid_subscription" to "anon";

grant update on table "public"."user_masjid_subscription" to "anon";

grant delete on table "public"."user_masjid_subscription" to "authenticated";

grant insert on table "public"."user_masjid_subscription" to "authenticated";

grant references on table "public"."user_masjid_subscription" to "authenticated";

grant select on table "public"."user_masjid_subscription" to "authenticated";

grant trigger on table "public"."user_masjid_subscription" to "authenticated";

grant truncate on table "public"."user_masjid_subscription" to "authenticated";

grant update on table "public"."user_masjid_subscription" to "authenticated";

grant delete on table "public"."user_masjid_subscription" to "service_role";

grant insert on table "public"."user_masjid_subscription" to "service_role";

grant references on table "public"."user_masjid_subscription" to "service_role";

grant select on table "public"."user_masjid_subscription" to "service_role";

grant trigger on table "public"."user_masjid_subscription" to "service_role";

grant truncate on table "public"."user_masjid_subscription" to "service_role";

grant update on table "public"."user_masjid_subscription" to "service_role";

create policy "Allow subscription crud for own user"
on "public"."user_masjid_subscription"
as permissive
for all
to public
using ((auth.uid() = user_id));



