
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."namaz" AS ENUM (
    'fajar',
    'zohar',
    'asr',
    'magrib',
    'isha',
    'jummah'
);

ALTER TYPE "public"."namaz" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_masjids_with_namaz_timings"() RETURNS TABLE("id" bigint, "name" "text", "longitude" numeric, "latitude" numeric, "address" "json", "mobile_no" "text", "namaz_timings" "json")
    LANGUAGE "sql"
    AS $$
SELECT
  m.id,
  m.name,
  m.longitude,
  m.latitude,
  m.address,
  m.mobile_no,
  json_object_agg(nt.namaz, nt.time) as namaz_timings
FROM
  public.masjid m
JOIN
  public.namaz_timing nt ON m.id = nt.masjid_id
GROUP BY
  m.id
ORDER BY
  m.id;
$$;

ALTER FUNCTION "public"."get_masjids_with_namaz_timings"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."masjid" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "address" "json",
    "mobile_no" "text",
    "uuid" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "longitude" numeric NOT NULL,
    "latitude" numeric NOT NULL
);

ALTER TABLE "public"."masjid" OWNER TO "postgres";

ALTER TABLE "public"."masjid" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."masjid_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."namaz_timing" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "masjid_id" bigint NOT NULL,
    "namaz" "public"."namaz",
    "time" time without time zone
);

ALTER TABLE "public"."namaz_timing" OWNER TO "postgres";

ALTER TABLE "public"."namaz_timing" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."namaz_timing_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."stream" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "masjid_id" bigint NOT NULL,
    "streamedOn" timestamp without time zone NOT NULL
);

ALTER TABLE "public"."stream" OWNER TO "postgres";

ALTER TABLE "public"."stream" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."stream_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "email" "text",
    "uuid" "uuid" DEFAULT "auth"."uid"()
);

ALTER TABLE "public"."user" OWNER TO "postgres";

ALTER TABLE "public"."user" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."masjid"
    ADD CONSTRAINT "masjid_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."masjid"
    ADD CONSTRAINT "masjid_uuid_key" UNIQUE ("uuid");

ALTER TABLE ONLY "public"."namaz_timing"
    ADD CONSTRAINT "namaz_timing_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."stream"
    ADD CONSTRAINT "stream_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "user_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "user_uid_key" UNIQUE ("uuid");

ALTER TABLE ONLY "public"."namaz_timing"
    ADD CONSTRAINT "namaz_timing_masjid_id_fkey" FOREIGN KEY ("masjid_id") REFERENCES "public"."masjid"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."stream"
    ADD CONSTRAINT "stream_masjid_id_fkey" FOREIGN KEY ("masjid_id") REFERENCES "public"."masjid"("id");

CREATE POLICY "Enable read access for all users" ON "public"."masjid" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."namaz_timing" FOR SELECT USING (true);

ALTER TABLE "public"."masjid" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."namaz_timing" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."stream" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."get_masjids_with_namaz_timings"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_masjids_with_namaz_timings"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_masjids_with_namaz_timings"() TO "service_role";

GRANT ALL ON TABLE "public"."masjid" TO "anon";
GRANT ALL ON TABLE "public"."masjid" TO "authenticated";
GRANT ALL ON TABLE "public"."masjid" TO "service_role";

GRANT ALL ON SEQUENCE "public"."masjid_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."masjid_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."masjid_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."namaz_timing" TO "anon";
GRANT ALL ON TABLE "public"."namaz_timing" TO "authenticated";
GRANT ALL ON TABLE "public"."namaz_timing" TO "service_role";

GRANT ALL ON SEQUENCE "public"."namaz_timing_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."namaz_timing_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."namaz_timing_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."stream" TO "anon";
GRANT ALL ON TABLE "public"."stream" TO "authenticated";
GRANT ALL ON TABLE "public"."stream" TO "service_role";

GRANT ALL ON SEQUENCE "public"."stream_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."stream_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."stream_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user" TO "anon";
GRANT ALL ON TABLE "public"."user" TO "authenticated";
GRANT ALL ON TABLE "public"."user" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
